// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: articles.sql

package sqlite

import (
	"context"
)

const queryArticleBySlug = `-- name: QueryArticleBySlug :one
SELECT id, created_at, updated_at, title, slug, filename FROM articles WHERE slug = ?
`

func (q *Queries) QueryArticleBySlug(ctx context.Context, slug string) (Article, error) {
	row := q.db.QueryRowContext(ctx, queryArticleBySlug, slug)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Slug,
		&i.Filename,
	)
	return i, err
}

const queryArticles = `-- name: QueryArticles :many
SELECT id, created_at, updated_at, title, slug, filename FROM articles
`

func (q *Queries) QueryArticles(ctx context.Context) ([]Article, error) {
	rows, err := q.db.QueryContext(ctx, queryArticles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Slug,
			&i.Filename,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
